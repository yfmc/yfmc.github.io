<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="MembersMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시 -->
	<resultMap id="membersMap" type="study.spring.cinephile.model.Members">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결 -->
		<result property="members_id" column="members_id" />
		<result property="user_id" column="user_id" />
		<result property="user_pw" column="user_pw" />
		<result property="user_name" column="user_name" />
		<result property="user_email" column="user_email" />
		<result property="gender" column="gender" />
		<result property="birthdate" column="birthdate" />
		<result property="phone" column="phone" />
		<result property="postcode" column="postcode" />
		<result property="addr" column="addr" />
		<result property="addr_detail" column="addr_detail" />
		<result property="is_out" column="is_out" />
		<result property="out_date" column="out_date" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
	</resultMap>
	
	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem" parameterType="study.spring.cinephile.model.Members"
		resultMap="membersMap">
		SELECT user_id, user_pw, user_name, user_email, gender, birthdate, phone, postcode, addr, addr_detail, is_out, out_date, reg_date, edit_date FROM Members WHERE members_id=#{members_id};
	</select>
	
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.spring.cinephile.model.Members"
		resultMap="membersMap">
		select user_id, user_pw, user_name, user_email, gender, birthdate, phone, postcode, addr, addr_detail, is_out, out_date, reg_date, edit_date from Members;
	
		<where>
			<if test ="user_name != null and user_name != ''">
				user_name like concat('%', #{user_name}, '%')
			</if>
			<if test ="gender != null and gender != ''">
				or gender like concat('%', #{gender}, '%')
			</if>
			<if test ="birthdate != null and birthdate != ''">
				or birthdate like concat('%', #{birthdate}, '%')
			</if>
		</where>
		
		order by members_id Desc
	</select>
	
	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.spring.cinephile.model.Members"
		useGeneratedKeys="true"
		keyProperty="Members_id">
		insert into Members (user_id, user_pw, user_name, user_email, gender, birthdate, phone, postcode, addr, addr_detail, is_out, reg_date, edit_date) values (#{user_id}, #{user_pw}, #{user_name}, #{user_email}, #{gender}, #{birthdate}, #{phone}, #{postcode}, #{addr}, #{addr_detail}, #{is_out}, now(), now());
	</insert>
		
	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.spring.cinephile.model.Members">
		delete from Members where Members_id=#{Members_id};
	</delete>
		
	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="study.spring.cinephile.model.Members">
		update Members set user_id=#{user_id}, user_pw=#{user_pw}, user_name=#{user_name}, user_email=#{user_email}, gender=#{gender}, birthdate=#{birthdate}, phone=#{phone}, postcode=#{postcode}, addr=#{addr}, addr_detail=#{addr_detail}, is_out=#{is_out}, reg_date = #{reg_date}, edit_date = now()
		where Members_id=#{Members_id};	
	</update>
	
	<!-- 데이터 수 조회하기 -->
	<!-- 
			조건에 맞는 데이터 수를 집계하여 int타입으로 반환
			count, max, min, sum, avg 함수를 사용한 경우 Mapper에서는
			resultMap이 아닌 resultType으로 반환 -->
			
	<select id="selectCountAll"
				parameterType="study.spring.cinephile.model.Members"
				resultType="int">
		select count(*) from Members
		
		<where>
			<if test ="user_name != null and user_name != ''">
				user_name like concat('%', #{user_name}, '%')
			</if>
			<if test ="gender != null and gender != ''">
				or gender like concat('%', #{gender}, '%')
			</if>
			<if test ="birthdate != null and birthdate != ''">
				or birthdate like concat('%', #{birthdate}, '%')
			</if>
		</where>
	</select>
</mapper>