<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="NoticeMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시 -->
	<resultMap id="noticeMap" type="study.spring.cinephile.model.Notice">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결 -->
		<result property="notice_id" 				column="notice_id" />
		<result property="notice_title" 			column="notice_title" />
		<result property="notice_content" 		column="notice_content" />
		<result property="views" 					column="views" />
		<result property="reg_date" 				column="reg_date" />
		<result property="edit_date" 				column="edit_date" />
	</resultMap>
	
	<!-- 공지사항 조회(datetime 타입)를 위한 기능 정의 -->
	<select id="selectItem" parameterType="study.spring.cinephile.model.Notice"
		resultMap="noticeMap">
		select notice_id, notice_title, notice_content, views, reg_date, edit_date from notice where notice_id=#{notice_id}
	</select>
	
	<!-- 공지사항 조회(date 타입)를 위한 기능 정의 -->
	<select id="selectItem_date" parameterType="study.spring.cinephile.model.Notice"
		resultMap="noticeMap">
		select notice_id, notice_title, notice_content, views, cast(reg_date as date) as reg_date, edit_date from notice where notice_id=#{notice_id}
	</select>
	
	<!-- 다음글 조회를 위한 기능정의  -->
	<select id="selectItem_next" parameterType="study.spring.cinephile.model.Notice"
		resultMap="noticeMap">
		<![CDATA[select notice_id, notice_title, notice_content, views, cast(reg_date as date) as reg_date, edit_date
		from notice where notice_id = (select notice_id from notice where notice_id > #{notice_id} order by notice_id  limit 0,1)]]>
	</select>
	
	<!-- 이전글 조회를 위한 기능정의  -->
	<select id="selectItem_prev" parameterType="study.spring.cinephile.model.Notice"
		resultMap="noticeMap">
		<![CDATA[select notice_id, notice_title, notice_content, views, cast(reg_date as date) as reg_date, edit_date
		from notice where notice_id = (select notice_id from notice where notice_id < #{notice_id} order by notice_id desc limit 0,1)]]>
	</select>

	<!-- 공지사항 목록조회(datetime 타입)를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.spring.cinephile.model.Notice"
		resultMap="noticeMap">
		select notice_id, notice_title, notice_content, views, reg_date, edit_date from notice
	
		<where>
			<if test ="searchType=='notice_title' and  keyword != null and keyword != ''">
				notice_title like concat('%', #{keyword}, '%')
			</if>
			
			<if test ="searchType=='notice_content'and keyword != null and keyword != ''">
				or notice_content like concat('%', #{keyword}, '%')
			</if>
		</where>
		
		order by notice_id desc
		
		<if test="listCount > 0">
			limit #{offset}, #{listCount}
		</if>
	</select>
	
	<!-- 공지사항 목록조회(date 타입)를 위한 기능 정의 -->
	<select id="selectList_date"
		parameterType="study.spring.cinephile.model.Notice"
		resultMap="noticeMap">
		select notice_id, notice_title, notice_content, views, cast(reg_date as date) as reg_date, edit_date from notice
	
		<where>
			<if test ="searchType=='notice_title' and  keyword != null and keyword != ''">
				notice_title like concat('%', #{keyword}, '%')
			</if>
			
			<if test ="searchType=='notice_content'and keyword != null and keyword != ''">
				or notice_content like concat('%', #{keyword}, '%')
			</if>
		</where>
		
		order by notice_id desc
		
		<if test="listCount > 0">
			limit #{offset}, #{listCount}
		</if>
	</select>
	
	<!-- 공지사항 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.spring.cinephile.model.Notice"
		useGeneratedKeys="true"
		keyProperty="notice_id">
		insert into notice (notice_title, notice_content, views, reg_date, edit_date) values (#{notice_title}, #{notice_content}, 0, now(), now());
	</insert>
		
	<!-- 공지사항 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.spring.cinephile.model.Notice">
		delete from notice where notice_id=#{notice_id}
	</delete>
		
	<!-- 공지사항 수정을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="study.spring.cinephile.model.Notice">
		update notice set notice_title=#{notice_title}, notice_content=#{notice_content}, edit_date = now()
		where notice_id=#{notice_id};
	</update>
	
	<!-- 데이터 수 조회하기 -->
	<!-- 
			조건에 맞는 데이터 수를 집계하여 int타입으로 반환
			count, max, min, sum, avg 함수를 사용한 경우 Mapper에서는
			resultMap이 아닌 resultType으로 반환 -->
			
	<select id="selectCountAll"
				parameterType="study.spring.cinephile.model.Notice"
				resultType="int">
		select count(*) from notice
		
		<where>
			<if test ="searchType=='notice_title' and  keyword != null and keyword != ''">
				notice_title like concat('%', #{keyword}, '%')
			</if>
			
			<if test ="searchType=='notice_content' and keyword != null and keyword != ''">
				or notice_content like concat('%', #{keyword}, '%')
			</if>
		</where>
	</select>
	
	<!-- 공지사항 조회수 올리기 -->
	<update id ="viewsUp" parameterType="study.spring.cinephile.model.Notice">
		update notice set views = views+1 where notice_id=#{notice_id}
	</update>
</mapper>