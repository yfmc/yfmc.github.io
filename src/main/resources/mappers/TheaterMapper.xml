<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TheaterMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="theaterMap" type="study.spring.cinephile.model.Theater">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="theaterId" column="theater_id" />
        <result property="provNo" column="prov_no" />
        <result property="brand" column="brand" />
        <result property="branch" column="branch" />
        <result property="rooms" column="rooms" />
        <result property="seats" column="seats" />
        <result property="oldAddr" column="old_addr" />
        <result property="newAddr" column="new_addr" />
        <result property="lat" column="lat" />
        <result property="lng" column="lng" />
    </resultMap>
    
    <!-- 자주 가는 영화관 (fav_theater) Beans -->
    <resultMap id="favTheaterMap" type="study.spring.cinephile.model.TheaterAdd">
    	<result property="favTheaterId" column="fav_theater_id" />
    	<result property="theaterId" column="theater_id" />
    	<result property="membersId" column="members_id" />
    	<result property="addedTime" column="added_time" />
    	<!-- inner join column -->
    	<result property="theaterName" column="theater_name" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 (지점 상세정보 조회) -->
    <select id="selectItem" parameterType="study.spring.cinephile.model.Theater"
        resultMap="theaterMap">
        select theater_id, prov_no, brand, branch, rooms, seats, old_addr, new_addr, lat, lng from theater where theater_id=#{theaterId};
    </select>
    
    <!-- 다중행 조회를 위한 기능 정의 (지역 별 극장목록 조회) -->
	<select id="selectList" parameterType="study.spring.cinephile.model.Theater" resultMap="theaterMap">
		select prov_no, theater_id, brand, branch, lat, lng from theater where prov_no=#{provNo};
	</select>
	
	<!-- 데이터 저장을 위한 기능 정의 (자주 가는 영화관 등록) -->
	<insert id="insertItem" parameterType="study.spring.cinephile.model.TheaterAdd" useGeneratedKeys="true" keyProperty="favTheaterId">
		insert into fav_theater (theater_id, members_id, added_time)
		values (#{theaterId}, #{membersId}, now())
	</insert>
	
	<!-- 데이터 수를 조회하기 위한 기능 정의 (자주 가는 영화관 등록 여부 검사) -->
	<select id="countFav" parameterType="study.spring.cinephile.model.TheaterAdd" resultType="int">
		select count(*) from fav_theater where members_id=#{membersId} and theater_id=#{theaterId};
	</select>
	
	<!-- 다중행 조회를 위한 기능 정의 (회원의 자주 가는 영화관 목록 조회) -->
	<select id="selectFavList" parameterType="study.spring.cinephile.model.TheaterAdd" resultMap="favTheaterMap">
		select f.theater_id, concat(t.brand, ' ', t.branch) as theater_name
		from fav_theater f
		inner join theater t on f.theater_id=t.theater_id
		where members_id=#{membersId};
	</select>
</mapper>
